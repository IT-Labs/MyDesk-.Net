
trigger:
  - feature/*
  - bug/*
  - story/*
  - main

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build MyDesk Application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: ubuntu-latest
    
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: './inOffice/inOfficeApplication/inOfficeApplication.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: './inOffice/inOfficeApplication/inOfficeApplication.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: './inOffice/inOfficeApplication.UnitTests/inOfficeApplication.UnitTests.csproj'
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      inputs:
        command: 'publish'
        projects: './inOffice/inOfficeApplication/inOfficeApplication.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to the dev environment'
    pool:
      vmImage: ubuntu-latest
    environment: 'development'
    variables:
    - group: mydesk-be-dev
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'ITL Gold'
              appType: 'webAppLinux'
              WebAppName: $(AppServiceName)
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              AppSettings: |
                -AllowedHosts "$(AllowedHosts)" 
                -ConnectionString "$(ConnectionString)" 
                -CustomBearerTokenSigningKey "$(CustomBearerTokenSigningKey)" 
                -JwtAudience "$(JwtAudience)" 
                -JwtIssuer "$(JwtIssuer)" 
                -MetadataAddress "$(MetadataAddress)"
                -SentimentEndpoint "$(SentimentEndpoint)"
                -TenantClaimKey "$(TenantClaimKey)"
                -Tenants "$(Tenants)"
                -AdminEmail "$(AdminEmail)" 
                -AdminPassword "$(AdminPassword)"

- stage: 'Production'
  displayName: 'Deploy to the prod environment'
  dependsOn: Dev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to the prod environment'
    pool:
      vmImage: ubuntu-latest
    environment: 'production'
    variables:
    - group: mydesk-be-production
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'ITL Gold'
              appType: 'webAppLinux'
              WebAppName: $(AppServiceName)
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              AppSettings: |
                -AllowedHosts "$(AllowedHosts)" 
                -ConnectionString "$(ConnectionString)" 
                -CustomBearerTokenSigningKey "$(CustomBearerTokenSigningKey)" 
                -JwtAudience "$(JwtAudience)" 
                -JwtIssuer "$(JwtIssuer)" 
                -MetadataAddress "$(MetadataAddress)" 
                -SentimentEndpoint "$(SentimentEndpoint)" 
                -TenantClaimKey "$(TenantClaimKey)" 
                -Tenants "$(Tenants)"
                -AdminEmail "$(AdminEmail)" 
                -AdminPassword "$(AdminPassword)"